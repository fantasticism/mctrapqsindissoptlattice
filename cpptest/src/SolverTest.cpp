/*
 * solver-tests.cpp
 *
 *  Created on: Dec 8, 2017
 *      Author: fakesci
 */

#include "definitions.h"
#include "Model.h"
#include "Solver.h"
#include "SolverContext.h"
#include "SolverTest0.h"
#include "utilities.h"

template<typename T> void _printDevArray(SolverContext &solverContext,
		const char* title, T * devArray, const uint width, const uint height) {
	const uint size = width * height;
	T hostArray[size];
	solverContext.transferArray2Host(devArray, hostArray, size);
	print(std::cout, title, hostArray, width, height);
}

template<typename T> void _printDevArray(SolverContext &solverContext,
		const char* title, T * devArray, const uint size) {
	T hostArray[size];
	solverContext.transferArray2Host(devArray, hostArray, size);
	print(std::cout, title, hostArray, size);
}

TEST (Solver, parallelNormalize) {
	std::ostringstream output;

	const int basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 2.0, 0.1);
	SolverContext solverContext(1, 1, 1, model);

	CUDA_COMPLEX_TYPE vector[] = { { 1., 64. }, { 2., 63. }, { 3., 62. }, { 4.,
			61. }, { 5., 60. }, { 6., 59. }, { 7., 58. }, { 8., 57. },
			{ 9., 56. }, { 10., 55. }, { 11., 54. }, { 12., 53. }, { 13., 52. },
			{ 14., 51. }, { 15., 50. }, { 16., 49. }, { 17., 48. },
			{ 18., 47. }, { 19., 46. }, { 20., 45. }, { 21., 44. },
			{ 22., 43. }, { 23., 42. }, { 24., 41. }, { 25., 40. },
			{ 26., 39. }, { 27., 38. }, { 28., 37. }, { 29., 36. },
			{ 30., 35. }, { 31., 34. }, { 32., 33. }, { 33., 32. },
			{ 34., 31. }, { 35., 30. }, { 36., 29. }, { 37., 28. },
			{ 38., 27. }, { 39., 26. }, { 40., 25. }, { 41., 24. },
			{ 42., 23. }, { 43., 22. }, { 44., 21. }, { 45., 20. },
			{ 46., 19. }, { 47., 18. }, { 48., 17. }, { 49., 16. },
			{ 50., 15. }, { 51., 14. }, { 52., 13. }, { 53., 12. },
			{ 54., 11. }, { 55., 10. }, { 56., 9. }, { 57., 8. }, { 58., 7. }, {
					59., 6. }, { 60., 5. }, { 61., 4. }, { 62., 3. },
			{ 63., 2. }, { 64., 1. } };

	Solver * solverDevPtr = solverContext.createSolverDev(vector);
	CUDA_COMPLEX_TYPE * vectorDevPtr = solverContext.transferState2Device(
			vector);

	testSolverParallelNormalize(solverDevPtr, vectorDevPtr);

	solverContext.transferState2Host(vectorDevPtr, vector);

	CUDA_COMPLEX_TYPE expectedResultState[] = { { 0.002364389962054795,
			0.1513209575715069 }, { 0.00472877992410959, 0.1489565676094521 }, {
			0.007093169886164386, 0.1465921776473973 }, { 0.00945755984821918,
			0.1442277876853425 }, { 0.01182194981027398, 0.1418633977232877 }, {
			0.01418633977232877, 0.1394990077612329 }, { 0.01655072973438356,
			0.1371346177991781 }, { 0.01891511969643836, 0.1347702278371233 }, {
			0.02127950965849315, 0.1324058378750685 }, { 0.02364389962054795,
			0.1300414479130137 }, { 0.02600828958260275, 0.1276770579509589 }, {
			0.02837267954465754, 0.1253126679889041 }, { 0.03073706950671233,
			0.1229482780268493 }, { 0.03310145946876713, 0.1205838880647945 }, {
			0.03546584943082193, 0.1182194981027398 }, { 0.03783023939287672,
			0.1158551081406849 }, { 0.04019462935493151, 0.1134907181786302 }, {
			0.04255901931698631, 0.1111263282165754 }, { 0.0449234092790411,
			0.1087619382545206 }, { 0.0472877992410959, 0.1063975482924658 }, {
			0.04965218920315069, 0.104033158330411 }, { 0.05201657916520549,
			0.1016687683683562 }, { 0.0543809691272603, 0.0993043784063014 }, {
			0.05674535908931508, 0.0969399884442466 }, { 0.05910974905136987,
			0.0945755984821918 }, { 0.06147413901342467, 0.092211208520137 }, {
			0.06383852897547947, 0.0898468185580822 }, { 0.06620291893753426,
			0.0874824285960274 }, { 0.06856730889958905, 0.0851180386339726 }, {
			0.07093169886164386, 0.0827536486719178 }, { 0.07329608882369865,
			0.080389258709863 }, { 0.07566047878575343, 0.07802486874780823 }, {
			0.07802486874780823, 0.07566047878575343 }, { 0.080389258709863,
			0.07329608882369865 }, { 0.0827536486719178, 0.07093169886164386 },
			{ 0.0851180386339726, 0.06856730889958905 }, { 0.0874824285960274,
					0.06620291893753426 }, { 0.0898468185580822,
					0.06383852897547947 }, { 0.092211208520137,
					0.06147413901342467 }, { 0.0945755984821918,
					0.05910974905136987 }, { 0.0969399884442466,
					0.05674535908931508 }, { 0.0993043784063014,
					0.0543809691272603 }, { 0.1016687683683562,
					0.05201657916520549 }, { 0.104033158330411,
					0.04965218920315069 }, { 0.1063975482924658,
					0.0472877992410959 }, { 0.1087619382545206,
					0.0449234092790411 }, { 0.1111263282165754,
					0.04255901931698631 }, { 0.1134907181786302,
					0.04019462935493151 }, { 0.1158551081406849,
					0.03783023939287672 }, { 0.1182194981027398,
					0.03546584943082193 }, { 0.1205838880647945,
					0.03310145946876713 }, { 0.1229482780268493,
					0.03073706950671233 }, { 0.1253126679889041,
					0.02837267954465754 }, { 0.1276770579509589,
					0.02600828958260275 }, { 0.1300414479130137,
					0.02364389962054795 }, { 0.1324058378750685,
					0.02127950965849315 }, { 0.1347702278371233,
					0.01891511969643836 }, { 0.1371346177991781,
					0.01655072973438356 }, { 0.1394990077612329,
					0.01418633977232877 }, { 0.1418633977232877,
					0.01182194981027398 }, { 0.1442277876853425,
					0.00945755984821918 }, { 0.1465921776473973,
					0.007093169886164386 }, { 0.1489565676094521,
					0.00472877992410959 }, { 0.1513209575715069,
					0.002364389962054795 } };

	std::cout << output.str();

	//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(vector[i],
				EqArrayComplexElementAt(expectedResultState, i, RIGHT_DIGITS));
	}

	checkCudaErrors(cudaFree(vectorDevPtr));
}

TEST (Solver, parallelMultMatrixVector) {

	const uint basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 10.0, 0.1);
	SolverContext solverContext(1, 1, 1, model);

	CUDA_COMPLEX_TYPE vector[] = { { 0.002364389962054795, 0.1513209575715069 },
			{ 0.00472877992410959, 0.1489565676094521 }, { 0.007093169886164386,
					0.1465921776473973 }, { 0.00945755984821918,
					0.1442277876853425 }, { 0.01182194981027398,
					0.1418633977232877 }, { 0.01418633977232877,
					0.1394990077612329 }, { 0.01655072973438356,
					0.1371346177991781 }, { 0.01891511969643836,
					0.1347702278371233 }, { 0.02127950965849315,
					0.1324058378750685 }, { 0.02364389962054795,
					0.1300414479130137 }, { 0.02600828958260275,
					0.1276770579509589 }, { 0.02837267954465754,
					0.1253126679889041 }, { 0.03073706950671233,
					0.1229482780268493 }, { 0.03310145946876713,
					0.1205838880647945 }, { 0.03546584943082193,
					0.1182194981027398 }, { 0.03783023939287672,
					0.1158551081406849 }, { 0.04019462935493151,
					0.1134907181786302 }, { 0.04255901931698631,
					0.1111263282165754 }, { 0.0449234092790411,
					0.1087619382545206 }, { 0.0472877992410959,
					0.1063975482924658 }, { 0.04965218920315069,
					0.104033158330411 }, { 0.05201657916520549,
					0.1016687683683562 }, { 0.0543809691272603,
					0.0993043784063014 }, { 0.05674535908931508,
					0.0969399884442466 }, { 0.05910974905136987,
					0.0945755984821918 }, { 0.06147413901342467,
					0.092211208520137 }, { 0.06383852897547947,
					0.0898468185580822 }, { 0.06620291893753426,
					0.0874824285960274 }, { 0.06856730889958905,
					0.0851180386339726 }, { 0.07093169886164386,
					0.0827536486719178 }, { 0.07329608882369865,
					0.080389258709863 }, { 0.07566047878575343,
					0.07802486874780823 }, { 0.07802486874780823,
					0.07566047878575343 }, { 0.080389258709863,
					0.07329608882369865 }, { 0.0827536486719178,
					0.07093169886164386 }, { 0.0851180386339726,
					0.06856730889958905 }, { 0.0874824285960274,
					0.06620291893753426 }, { 0.0898468185580822,
					0.06383852897547947 }, { 0.092211208520137,
					0.06147413901342467 }, { 0.0945755984821918,
					0.05910974905136987 }, { 0.0969399884442466,
					0.05674535908931508 }, { 0.0993043784063014,
					0.0543809691272603 }, { 0.1016687683683562,
					0.05201657916520549 }, { 0.104033158330411,
					0.04965218920315069 }, { 0.1063975482924658,
					0.0472877992410959 }, { 0.1087619382545206,
					0.0449234092790411 }, { 0.1111263282165754,
					0.04255901931698631 }, { 0.1134907181786302,
					0.04019462935493151 }, { 0.1158551081406849,
					0.03783023939287672 }, { 0.1182194981027398,
					0.03546584943082193 }, { 0.1205838880647945,
					0.03310145946876713 }, { 0.1229482780268493,
					0.03073706950671233 }, { 0.1253126679889041,
					0.02837267954465754 }, { 0.1276770579509589,
					0.02600828958260275 }, { 0.1300414479130137,
					0.02364389962054795 }, { 0.1324058378750685,
					0.02127950965849315 }, { 0.1347702278371233,
					0.01891511969643836 }, { 0.1371346177991781,
					0.01655072973438356 }, { 0.1394990077612329,
					0.01418633977232877 }, { 0.1418633977232877,
					0.01182194981027398 }, { 0.1442277876853425,
					0.00945755984821918 }, { 0.1465921776473973,
					0.007093169886164386 }, { 0.1489565676094521,
					0.00472877992410959 }, { 0.1513209575715069,
					0.002364389962054795 } };

	Solver * solverDevPtr = solverContext.createSolverDev(vector);
	CUDA_COMPLEX_TYPE * vectorDevPtr = solverContext.transferState2Device(
			vector);

	CUDA_COMPLEX_TYPE resultState[basisSize];
	CUDA_COMPLEX_TYPE * resultStateDevPtr = solverContext.transferState2Device(
			resultState);

	testSolverParallelMultMatrixVector(solverDevPtr, solverContext.getDevPtrL(),
			basisSize, basisSize, vectorDevPtr, resultStateDevPtr);

	solverContext.transferState2Host(resultStateDevPtr, resultState);

	CUDA_COMPLEX_TYPE expectedResultState[] = { { 32.91230827180275,
			-40.85665854430685 }, { 1400.475462324296, -1427.334932293239 }, {
			1398.931988557067, -1426.305949781753 }, { 762.4003805325232,
			-881.323521087971 }, { 1372.102782779639, -1455.707611837896 }, {
			2739.665936832133, -2842.185885586828 }, { 2738.122463064902,
			-2841.156903075342 }, { 2101.590855040359, -2296.17447438156 }, {
			1426.941497803552, -1394.513416595978 }, { 2794.504651856045,
			-2780.991690344911 }, { 2792.961178088816, -2779.962707833424 }, {
			2156.429570064273, -2234.980279139642 }, { 651.2702692920085,
			-985.038905407481 }, { 2018.833423344502, -2371.517179156413 }, {
			2017.289949577273, -2370.488196644927 }, { 1380.758341552729,
			-1825.505767951145 }, { 1258.612064601009, -1569.198330016526 }, {
			2626.175218653501, -2955.676603765458 }, { 2624.631744886273,
			-2954.647621253972 }, { 1988.100136861729, -2409.66519256019 }, {
			2597.802539108844, -2984.049283310116 }, { 3965.365693161338,
			-4370.527557059047 }, { 3963.822219394108, -4369.498574547562 }, {
			3327.290611369564, -3824.516145853779 }, { 2652.641254132757,
			-2922.855088068199 }, { 4020.204408185251, -4309.33336181713 }, {
			4018.660934418023, -4308.304379305643 }, { 3382.129326393479,
			-3763.321950611862 }, { 1876.970025621214, -2513.380576879701 }, {
			3244.533179673708, -3899.858850628631 }, { 3242.989705906479,
			-3898.829868117146 }, { 2606.458097881934, -3353.847439423363 }, {
			1541.93029346214, -1274.228387422387 }, { 2909.493447514635,
			-2660.70666117132 }, { 2907.949973747404, -2659.677678659834 }, {
			2271.418365722861, -2114.695249966051 }, { 2881.120767969976,
			-2689.079340715979 }, { 4248.683922022471, -4075.557614464911 }, {
			4247.140448255239, -4074.528631953423 }, { 3610.608840230698,
			-3529.54620325964 }, { 2935.959482993889, -2627.885145474059 }, {
			4303.522637046384, -4014.363419222993 }, { 4301.979163279155,
			-4013.334436711506 }, { 3665.447555254611, -3468.352008017722 }, {
			2160.288254482347, -2218.410634285562 }, { 3527.85140853484,
			-3604.888908034494 }, { 3526.307934767609, -3603.859925523007 }, {
			2889.776326743065, -3058.877496829226 }, { 209.7005830025942,
			-1406.785546255028 }, { 1577.263737055088, -2793.26382000396 }, {
			1575.720263287858, -2792.234837492474 }, { 939.188655263315,
			-2247.252408798691 }, { 1548.89105751043, -2821.636499548617 }, {
			2916.454211562924, -4208.114773297548 }, { 2914.910737795696,
			-4207.085790786063 }, { 2278.37912977115, -3662.103362092281 }, {
			1603.729772534344, -2760.4423043067 }, { 2971.292926586838,
			-4146.920578055633 }, { 2969.749452819607, -4145.891595544145 }, {
			2333.217844795065, -3600.909166850364 }, { 828.0585440228,
			-2350.967793118202 }, { 2195.621698075293, -3737.446066867135 }, {
			2194.078224308064, -3736.417084355647 }, { 1557.546616283521,
			-3191.434655661865 } };

	//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(resultState[i],
				EqArrayComplexElementAt(expectedResultState, i, RIGHT_DIGITS));
	}

	checkCudaErrors(cudaFree(vectorDevPtr));
	checkCudaErrors(cudaFree(resultStateDevPtr));
}

TEST (Solver, parallelMultCSR3MatrixVector) {
	const int basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 10.0, 0.1);
	SolverContext solverContext(1, 1, 1, model);

	CUDA_COMPLEX_TYPE vector[] = { { 0.002364389962054795, 0.1513209575715069 },
			{ 0.00472877992410959, 0.1489565676094521 }, { 0.007093169886164386,
					0.1465921776473973 }, { 0.00945755984821918,
					0.1442277876853425 }, { 0.01182194981027398,
					0.1418633977232877 }, { 0.01418633977232877,
					0.1394990077612329 }, { 0.01655072973438356,
					0.1371346177991781 }, { 0.01891511969643836,
					0.1347702278371233 }, { 0.02127950965849315,
					0.1324058378750685 }, { 0.02364389962054795,
					0.1300414479130137 }, { 0.02600828958260275,
					0.1276770579509589 }, { 0.02837267954465754,
					0.1253126679889041 }, { 0.03073706950671233,
					0.1229482780268493 }, { 0.03310145946876713,
					0.1205838880647945 }, { 0.03546584943082193,
					0.1182194981027398 }, { 0.03783023939287672,
					0.1158551081406849 }, { 0.04019462935493151,
					0.1134907181786302 }, { 0.04255901931698631,
					0.1111263282165754 }, { 0.0449234092790411,
					0.1087619382545206 }, { 0.0472877992410959,
					0.1063975482924658 }, { 0.04965218920315069,
					0.104033158330411 }, { 0.05201657916520549,
					0.1016687683683562 }, { 0.0543809691272603,
					0.0993043784063014 }, { 0.05674535908931508,
					0.0969399884442466 }, { 0.05910974905136987,
					0.0945755984821918 }, { 0.06147413901342467,
					0.092211208520137 }, { 0.06383852897547947,
					0.0898468185580822 }, { 0.06620291893753426,
					0.0874824285960274 }, { 0.06856730889958905,
					0.0851180386339726 }, { 0.07093169886164386,
					0.0827536486719178 }, { 0.07329608882369865,
					0.080389258709863 }, { 0.07566047878575343,
					0.07802486874780823 }, { 0.07802486874780823,
					0.07566047878575343 }, { 0.080389258709863,
					0.07329608882369865 }, { 0.0827536486719178,
					0.07093169886164386 }, { 0.0851180386339726,
					0.06856730889958905 }, { 0.0874824285960274,
					0.06620291893753426 }, { 0.0898468185580822,
					0.06383852897547947 }, { 0.092211208520137,
					0.06147413901342467 }, { 0.0945755984821918,
					0.05910974905136987 }, { 0.0969399884442466,
					0.05674535908931508 }, { 0.0993043784063014,
					0.0543809691272603 }, { 0.1016687683683562,
					0.05201657916520549 }, { 0.104033158330411,
					0.04965218920315069 }, { 0.1063975482924658,
					0.0472877992410959 }, { 0.1087619382545206,
					0.0449234092790411 }, { 0.1111263282165754,
					0.04255901931698631 }, { 0.1134907181786302,
					0.04019462935493151 }, { 0.1158551081406849,
					0.03783023939287672 }, { 0.1182194981027398,
					0.03546584943082193 }, { 0.1205838880647945,
					0.03310145946876713 }, { 0.1229482780268493,
					0.03073706950671233 }, { 0.1253126679889041,
					0.02837267954465754 }, { 0.1276770579509589,
					0.02600828958260275 }, { 0.1300414479130137,
					0.02364389962054795 }, { 0.1324058378750685,
					0.02127950965849315 }, { 0.1347702278371233,
					0.01891511969643836 }, { 0.1371346177991781,
					0.01655072973438356 }, { 0.1394990077612329,
					0.01418633977232877 }, { 0.1418633977232877,
					0.01182194981027398 }, { 0.1442277876853425,
					0.00945755984821918 }, { 0.1465921776473973,
					0.007093169886164386 }, { 0.1489565676094521,
					0.00472877992410959 }, { 0.1513209575715069,
					0.002364389962054795 } };

	Solver * solverDevPtr = solverContext.createSolverDev(vector);
	CUDA_COMPLEX_TYPE * vectorDevPtr = solverContext.transferState2Device(
			vector);

	CUDA_COMPLEX_TYPE resultState[basisSize];
	CUDA_COMPLEX_TYPE * resultStateDevPtr = solverContext.transferState2Device(
			resultState);

	//--------------------------check A1--------------------------------------------------

	testSolverParallelMultCSR3MatrixVector(solverDevPtr,
			solverContext.getA1CSR3RowsNum(),
			solverContext.getA1CSR3ValuesDevPtr(),
			solverContext.getA1CSR3ColumnsDevPtr(),
			solverContext.getA1CSR3RowIndexDevPtr(), vectorDevPtr,
			resultStateDevPtr);

	solverContext.transferState2Host(resultStateDevPtr, resultState);

//	std::cout << "Values number: "
//			<< model.getA1InCSR3()->rowIndex[solverContext.getA1CSR3RowsNum()]
//			<< std::endl;
//	_printDevArray(solverContext, "Matrix values",
//			(CUDA_COMPLEX_TYPE *)solverContext.getA1CSR3ValuesDevPtr(),
//			model.getA1InCSR3()->rowIndex[solverContext.getA1CSR3RowsNum()]);
//	_printDevArray(solverContext, "Matrix rows",
//			(int *)solverContext.getA1CSR3RowIndexDevPtr(),
//			solverContext.getA1CSR3RowsNum() + 1);
//	_printDevArray(solverContext, "Matrix columns",
//			(int *)solverContext.getA1CSR3ColumnsDevPtr(),
//			model.getA1InCSR3()->rowIndex[solverContext.getA1CSR3RowsNum()]);
//	_printDevArray(solverContext, "Result on device", resultStateDevPtr,
//			basisSize);

	CUDA_COMPLEX_TYPE expectedResultState1[] = { { 1.532124695411507,
			0.92684086512548 }, { 1.532124695411507, 0.92684086512548 }, {
			1.532124695411507, 0.92684086512548 }, { 1.532124695411507,
			0.92684086512548 }, { 1.532124695411507, 0.92684086512548 }, {
			1.532124695411507, 0.92684086512548 }, { 1.532124695411507,
			0.92684086512548 }, { 1.532124695411507, 0.92684086512548 }, {
			1.532124695411507, 0.92684086512548 }, { 1.532124695411507,
			0.92684086512548 }, { 1.532124695411507, 0.92684086512548 }, {
			1.532124695411507, 0.92684086512548 }, { 1.532124695411507,
			0.92684086512548 }, { 1.532124695411507, 0.92684086512548 }, {
			1.532124695411507, 0.92684086512548 }, { 1.532124695411507,
			0.92684086512548 }, { 2.137408525697534, 0.321557034839452 }, {
			2.137408525697534, 0.321557034839452 }, { 2.137408525697534,
			0.321557034839452 }, { 2.137408525697534, 0.321557034839452 }, {
			2.137408525697534, 0.321557034839452 }, { 2.137408525697534,
			0.321557034839452 }, { 2.137408525697534, 0.321557034839452 }, {
			2.137408525697534, 0.321557034839452 }, { 2.137408525697534,
			0.321557034839452 }, { 2.137408525697534, 0.321557034839452 }, {
			2.137408525697534, 0.321557034839452 }, { 2.137408525697534,
			0.321557034839452 }, { 2.137408525697534, 0.321557034839452 }, {
			2.137408525697534, 0.321557034839452 }, { 2.137408525697534,
			0.321557034839452 }, { 2.137408525697534, 0.321557034839452 }, { 0.,
			0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
			0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. } };

//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(resultState[i],
				EqArrayComplexElementAt(expectedResultState1, i, RIGHT_DIGITS));
	}

	//--------------------------check A2--------------------------------------------------

	testSolverParallelMultCSR3MatrixVector(solverDevPtr,
			solverContext.getA2CSR3RowsNum(),
			solverContext.getA2CSR3ValuesDevPtr(),
			solverContext.getA2CSR3ColumnsDevPtr(),
			solverContext.getA2CSR3RowIndexDevPtr(), vectorDevPtr,
			resultStateDevPtr);

	solverContext.transferState2Host(resultStateDevPtr, resultState);

	CUDA_COMPLEX_TYPE expectedResultState2[] = { { 1.305143259054247,
			1.15382230148274 }, { 1.305143259054247, 1.15382230148274 }, {
			1.305143259054247, 1.15382230148274 }, { 1.305143259054247,
			1.15382230148274 }, { 1.456464216625753, 1.002501343911233 }, {
			1.456464216625753, 1.002501343911233 }, { 1.456464216625753,
			1.002501343911233 }, { 1.456464216625753, 1.002501343911233 }, { 0.,
			0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
			0., 0. }, { 0., 0. }, { 1.305143259054247, 1.15382230148274 }, {
			1.305143259054247, 1.15382230148274 }, { 1.305143259054247,
			1.15382230148274 }, { 1.305143259054247, 1.15382230148274 }, {
			1.456464216625753, 1.002501343911233 }, { 1.456464216625753,
			1.002501343911233 }, { 1.456464216625753, 1.002501343911233 }, {
			1.456464216625753, 1.002501343911233 }, { 0., 0. }, { 0., 0. }, {
			0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 1.305143259054247, 1.15382230148274 }, {
					1.305143259054247, 1.15382230148274 }, { 1.305143259054247,
					1.15382230148274 }, { 1.305143259054247, 1.15382230148274 },
			{ 1.456464216625753, 1.002501343911233 }, { 1.456464216625753,
					1.002501343911233 },
			{ 1.456464216625753, 1.002501343911233 }, { 1.456464216625753,
					1.002501343911233 }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
					0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
					1.305143259054247, 1.15382230148274 }, { 1.305143259054247,
					1.15382230148274 }, { 1.305143259054247, 1.15382230148274 },
			{ 1.305143259054247, 1.15382230148274 }, { 1.456464216625753,
					1.002501343911233 },
			{ 1.456464216625753, 1.002501343911233 }, { 1.456464216625753,
					1.002501343911233 },
			{ 1.456464216625753, 1.002501343911233 }, { 0., 0. }, { 0., 0. }, {
					0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
					0., 0. } };

	//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(resultState[i],
				EqArrayComplexElementAt(expectedResultState2, i, RIGHT_DIGITS));
	}

	//--------------------------check A3--------------------------------------------------

	testSolverParallelMultCSR3MatrixVector(solverDevPtr,
			solverContext.getA3CSR3RowsNum(),
			solverContext.getA3CSR3ValuesDevPtr(),
			solverContext.getA3CSR3ColumnsDevPtr(),
			solverContext.getA3CSR3RowIndexDevPtr(), vectorDevPtr,
			resultStateDevPtr);

	solverContext.transferState2Host(resultStateDevPtr, resultState);

	CUDA_COMPLEX_TYPE expectedResultState3[] = { { 1.248397899964932,
			1.210567660572055 }, { 1.286228139357809, 1.172737421179179 }, { 0.,
			0. }, { 0., 0. }, { 1.248397899964932, 1.210567660572055 }, {
			1.286228139357809, 1.172737421179179 }, { 0., 0. }, { 0., 0. }, {
			1.248397899964932, 1.210567660572055 }, { 1.286228139357809,
			1.172737421179179 }, { 0., 0. }, { 0., 0. }, { 1.248397899964932,
			1.210567660572055 }, { 1.286228139357809, 1.172737421179179 }, { 0.,
			0. }, { 0., 0. }, { 1.248397899964932, 1.210567660572055 }, {
			1.286228139357809, 1.172737421179179 }, { 0., 0. }, { 0., 0. }, {
			1.248397899964932, 1.210567660572055 }, { 1.286228139357809,
			1.172737421179179 }, { 0., 0. }, { 0., 0. }, { 1.248397899964932,
			1.210567660572055 }, { 1.286228139357809, 1.172737421179179 }, { 0.,
			0. }, { 0., 0. }, { 1.248397899964932, 1.210567660572055 }, {
			1.286228139357809, 1.172737421179179 }, { 0., 0. }, { 0., 0. }, {
			1.248397899964932, 1.210567660572055 }, { 1.286228139357809,
			1.172737421179179 }, { 0., 0. }, { 0., 0. }, { 1.248397899964932,
			1.210567660572055 }, { 1.286228139357809, 1.172737421179179 }, { 0.,
			0. }, { 0., 0. }, { 1.248397899964932, 1.210567660572055 }, {
			1.286228139357809, 1.172737421179179 }, { 0., 0. }, { 0., 0. }, {
			1.248397899964932, 1.210567660572055 }, { 1.286228139357809,
			1.172737421179179 }, { 0., 0. }, { 0., 0. }, { 1.248397899964932,
			1.210567660572055 }, { 1.286228139357809, 1.172737421179179 }, { 0.,
			0. }, { 0., 0. }, { 1.248397899964932, 1.210567660572055 }, {
			1.286228139357809, 1.172737421179179 }, { 0., 0. }, { 0., 0. }, {
			1.248397899964932, 1.210567660572055 }, { 1.286228139357809,
			1.172737421179179 }, { 0., 0. }, { 0., 0. }, { 1.248397899964932,
			1.210567660572055 }, { 1.286228139357809, 1.172737421179179 }, { 0.,
			0. }, { 0., 0. } };

	//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(resultState[i],
				EqArrayComplexElementAt(expectedResultState3, i, RIGHT_DIGITS));
	}

	checkCudaErrors(cudaFree(vectorDevPtr));
	checkCudaErrors(cudaFree(resultStateDevPtr));
}

TEST (Solver, parallelCopy) {

	const uint basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 10.0, 0.1);
	SolverContext solverContext(1, 1, 1, model);

	CUDA_COMPLEX_TYPE vector[] = { { 0.002364389962054795, 0.1513209575715069 },
			{ 0.00472877992410959, 0.1489565676094521 }, { 0.007093169886164386,
					0.1465921776473973 }, { 0.00945755984821918,
					0.1442277876853425 }, { 0.01182194981027398,
					0.1418633977232877 }, { 0.01418633977232877,
					0.1394990077612329 }, { 0.01655072973438356,
					0.1371346177991781 }, { 0.01891511969643836,
					0.1347702278371233 }, { 0.02127950965849315,
					0.1324058378750685 }, { 0.02364389962054795,
					0.1300414479130137 }, { 0.02600828958260275,
					0.1276770579509589 }, { 0.02837267954465754,
					0.1253126679889041 }, { 0.03073706950671233,
					0.1229482780268493 }, { 0.03310145946876713,
					0.1205838880647945 }, { 0.03546584943082193,
					0.1182194981027398 }, { 0.03783023939287672,
					0.1158551081406849 }, { 0.04019462935493151,
					0.1134907181786302 }, { 0.04255901931698631,
					0.1111263282165754 }, { 0.0449234092790411,
					0.1087619382545206 }, { 0.0472877992410959,
					0.1063975482924658 }, { 0.04965218920315069,
					0.104033158330411 }, { 0.05201657916520549,
					0.1016687683683562 }, { 0.0543809691272603,
					0.0993043784063014 }, { 0.05674535908931508,
					0.0969399884442466 }, { 0.05910974905136987,
					0.0945755984821918 }, { 0.06147413901342467,
					0.092211208520137 }, { 0.06383852897547947,
					0.0898468185580822 }, { 0.06620291893753426,
					0.0874824285960274 }, { 0.06856730889958905,
					0.0851180386339726 }, { 0.07093169886164386,
					0.0827536486719178 }, { 0.07329608882369865,
					0.080389258709863 }, { 0.07566047878575343,
					0.07802486874780823 }, { 0.07802486874780823,
					0.07566047878575343 }, { 0.080389258709863,
					0.07329608882369865 }, { 0.0827536486719178,
					0.07093169886164386 }, { 0.0851180386339726,
					0.06856730889958905 }, { 0.0874824285960274,
					0.06620291893753426 }, { 0.0898468185580822,
					0.06383852897547947 }, { 0.092211208520137,
					0.06147413901342467 }, { 0.0945755984821918,
					0.05910974905136987 }, { 0.0969399884442466,
					0.05674535908931508 }, { 0.0993043784063014,
					0.0543809691272603 }, { 0.1016687683683562,
					0.05201657916520549 }, { 0.104033158330411,
					0.04965218920315069 }, { 0.1063975482924658,
					0.0472877992410959 }, { 0.1087619382545206,
					0.0449234092790411 }, { 0.1111263282165754,
					0.04255901931698631 }, { 0.1134907181786302,
					0.04019462935493151 }, { 0.1158551081406849,
					0.03783023939287672 }, { 0.1182194981027398,
					0.03546584943082193 }, { 0.1205838880647945,
					0.03310145946876713 }, { 0.1229482780268493,
					0.03073706950671233 }, { 0.1253126679889041,
					0.02837267954465754 }, { 0.1276770579509589,
					0.02600828958260275 }, { 0.1300414479130137,
					0.02364389962054795 }, { 0.1324058378750685,
					0.02127950965849315 }, { 0.1347702278371233,
					0.01891511969643836 }, { 0.1371346177991781,
					0.01655072973438356 }, { 0.1394990077612329,
					0.01418633977232877 }, { 0.1418633977232877,
					0.01182194981027398 }, { 0.1442277876853425,
					0.00945755984821918 }, { 0.1465921776473973,
					0.007093169886164386 }, { 0.1489565676094521,
					0.00472877992410959 }, { 0.1513209575715069,
					0.002364389962054795 } };

	Solver * solverDevPtr = solverContext.createSolverDev(vector);
	CUDA_COMPLEX_TYPE * vectorDevPtr = solverContext.transferState2Device(
			vector);

	CUDA_COMPLEX_TYPE resultState[basisSize];
	CUDA_COMPLEX_TYPE * resultStateDevPtr = solverContext.transferState2Device(
			resultState);

	testSolverParallelCopy(solverDevPtr, vectorDevPtr, resultStateDevPtr);

	solverContext.transferState2Host(resultStateDevPtr, resultState);

	//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(resultState[i],
				EqArrayComplexElementAt(vector, i, RIGHT_DIGITS));
	}

	checkCudaErrors(cudaFree(vectorDevPtr));
	checkCudaErrors(cudaFree(resultStateDevPtr));
}

TEST (Solver, parallelCalcAlphaVector) {

	const uint basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 10.0, 0.1);
	SolverContext solverContext(1, 1, 1, model);

	CUDA_COMPLEX_TYPE vector[] = { { 0.002364389962054795, 0.1513209575715069 },
			{ 0.00472877992410959, 0.1489565676094521 }, { 0.007093169886164386,
					0.1465921776473973 }, { 0.00945755984821918,
					0.1442277876853425 }, { 0.01182194981027398,
					0.1418633977232877 }, { 0.01418633977232877,
					0.1394990077612329 }, { 0.01655072973438356,
					0.1371346177991781 }, { 0.01891511969643836,
					0.1347702278371233 }, { 0.02127950965849315,
					0.1324058378750685 }, { 0.02364389962054795,
					0.1300414479130137 }, { 0.02600828958260275,
					0.1276770579509589 }, { 0.02837267954465754,
					0.1253126679889041 }, { 0.03073706950671233,
					0.1229482780268493 }, { 0.03310145946876713,
					0.1205838880647945 }, { 0.03546584943082193,
					0.1182194981027398 }, { 0.03783023939287672,
					0.1158551081406849 }, { 0.04019462935493151,
					0.1134907181786302 }, { 0.04255901931698631,
					0.1111263282165754 }, { 0.0449234092790411,
					0.1087619382545206 }, { 0.0472877992410959,
					0.1063975482924658 }, { 0.04965218920315069,
					0.104033158330411 }, { 0.05201657916520549,
					0.1016687683683562 }, { 0.0543809691272603,
					0.0993043784063014 }, { 0.05674535908931508,
					0.0969399884442466 }, { 0.05910974905136987,
					0.0945755984821918 }, { 0.06147413901342467,
					0.092211208520137 }, { 0.06383852897547947,
					0.0898468185580822 }, { 0.06620291893753426,
					0.0874824285960274 }, { 0.06856730889958905,
					0.0851180386339726 }, { 0.07093169886164386,
					0.0827536486719178 }, { 0.07329608882369865,
					0.080389258709863 }, { 0.07566047878575343,
					0.07802486874780823 }, { 0.07802486874780823,
					0.07566047878575343 }, { 0.080389258709863,
					0.07329608882369865 }, { 0.0827536486719178,
					0.07093169886164386 }, { 0.0851180386339726,
					0.06856730889958905 }, { 0.0874824285960274,
					0.06620291893753426 }, { 0.0898468185580822,
					0.06383852897547947 }, { 0.092211208520137,
					0.06147413901342467 }, { 0.0945755984821918,
					0.05910974905136987 }, { 0.0969399884442466,
					0.05674535908931508 }, { 0.0993043784063014,
					0.0543809691272603 }, { 0.1016687683683562,
					0.05201657916520549 }, { 0.104033158330411,
					0.04965218920315069 }, { 0.1063975482924658,
					0.0472877992410959 }, { 0.1087619382545206,
					0.0449234092790411 }, { 0.1111263282165754,
					0.04255901931698631 }, { 0.1134907181786302,
					0.04019462935493151 }, { 0.1158551081406849,
					0.03783023939287672 }, { 0.1182194981027398,
					0.03546584943082193 }, { 0.1205838880647945,
					0.03310145946876713 }, { 0.1229482780268493,
					0.03073706950671233 }, { 0.1253126679889041,
					0.02837267954465754 }, { 0.1276770579509589,
					0.02600828958260275 }, { 0.1300414479130137,
					0.02364389962054795 }, { 0.1324058378750685,
					0.02127950965849315 }, { 0.1347702278371233,
					0.01891511969643836 }, { 0.1371346177991781,
					0.01655072973438356 }, { 0.1394990077612329,
					0.01418633977232877 }, { 0.1418633977232877,
					0.01182194981027398 }, { 0.1442277876853425,
					0.00945755984821918 }, { 0.1465921776473973,
					0.007093169886164386 }, { 0.1489565676094521,
					0.00472877992410959 }, { 0.1513209575715069,
					0.002364389962054795 } };

	Solver * solverDevPtr = solverContext.createSolverDev(vector);
	CUDA_COMPLEX_TYPE * vectorDevPtr = solverContext.transferState2Device(
			vector);

	CUDA_COMPLEX_TYPE resultState[basisSize];
	CUDA_COMPLEX_TYPE * resultStateDevPtr = solverContext.transferState2Device(
			resultState);

	FLOAT_TYPE alpha = 0.8;

	testSolverParallelCalcAlphaVector(solverDevPtr, alpha, vectorDevPtr,
			resultStateDevPtr);

	solverContext.transferState2Host(resultStateDevPtr, resultState);

	CUDA_COMPLEX_TYPE expectedResultState[] = { { 0.001891511969643836,
			0.1210567660572055 }, { 0.003783023939287672, 0.1191652540875617 },
			{ 0.005674535908931508, 0.1172737421179178 }, {
					0.007566047878575343, 0.115382230148274 }, {
					0.00945755984821918, 0.1134907181786302 }, {
					0.01134907181786302, 0.1115992062089863 }, {
					0.01324058378750685, 0.1097076942393425 }, {
					0.01513209575715069, 0.1078161822696986 }, {
					0.01702360772679452, 0.1059246703000548 }, {
					0.01891511969643836, 0.104033158330411 }, {
					0.0208066316660822, 0.1021416463607671 }, {
					0.02269814363572603, 0.1002501343911233 }, {
					0.02458965560536987, 0.0983586224214795 }, {
					0.0264811675750137, 0.0964671104518357 }, {
					0.02837267954465754, 0.0945755984821918 }, {
					0.03026419151430138, 0.092684086512548 }, {
					0.03215570348394521, 0.0907925745429041 }, {
					0.03404721545358905, 0.0889010625732603 }, {
					0.03593872742323289, 0.0870095506036165 }, {
					0.03783023939287672, 0.0851180386339726 }, {
					0.03972175136252055, 0.0832265266643288 }, {
					0.04161326333216439, 0.081335014694685 }, {
					0.04350477530180823, 0.0794435027250411 }, {
					0.04539628727145207, 0.07755199075539727 }, {
					0.0472877992410959, 0.07566047878575343 }, {
					0.04917931121073973, 0.0737689668161096 }, {
					0.05107082318038358, 0.07187745484646578 }, {
					0.05296233515002741, 0.06998594287682192 }, {
					0.05485384711967124, 0.06809443090717809 }, {
					0.05674535908931508, 0.06620291893753426 }, {
					0.05863687105895892, 0.06431140696789042 }, {
					0.06052838302860275, 0.06241989499824658 }, {
					0.06241989499824658, 0.06052838302860275 }, {
					0.06431140696789042, 0.05863687105895892 }, {
					0.06620291893753426, 0.05674535908931508 }, {
					0.06809443090717809, 0.05485384711967124 }, {
					0.06998594287682192, 0.05296233515002741 }, {
					0.07187745484646578, 0.05107082318038358 }, {
					0.0737689668161096, 0.04917931121073973 }, {
					0.07566047878575343, 0.0472877992410959 }, {
					0.07755199075539727, 0.04539628727145207 }, {
					0.0794435027250411, 0.04350477530180823 }, {
					0.081335014694685, 0.04161326333216439 }, {
					0.0832265266643288, 0.03972175136252055 }, {
					0.0851180386339726, 0.03783023939287672 }, {
					0.0870095506036165, 0.03593872742323289 }, {
					0.0889010625732603, 0.03404721545358905 }, {
					0.0907925745429041, 0.03215570348394521 }, {
					0.092684086512548, 0.03026419151430138 }, {
					0.0945755984821918, 0.02837267954465754 }, {
					0.0964671104518357, 0.0264811675750137 }, {
					0.0983586224214795, 0.02458965560536987 }, {
					0.1002501343911233, 0.02269814363572603 }, {
					0.1021416463607671, 0.0208066316660822 }, {
					0.104033158330411, 0.01891511969643836 }, {
					0.1059246703000548, 0.01702360772679452 }, {
					0.1078161822696986, 0.01513209575715069 }, {
					0.1097076942393425, 0.01324058378750685 }, {
					0.1115992062089863, 0.01134907181786302 }, {
					0.1134907181786302, 0.00945755984821918 }, {
					0.115382230148274, 0.007566047878575343 }, {
					0.1172737421179178, 0.005674535908931508 }, {
					0.1191652540875617, 0.003783023939287672 }, {
					0.1210567660572055, 0.001891511969643836 } };

	//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(resultState[i],
				EqArrayComplexElementAt(expectedResultState, i, RIGHT_DIGITS));
	}

	checkCudaErrors(cudaFree(vectorDevPtr));
	checkCudaErrors(cudaFree(resultStateDevPtr));
}

TEST (Solver, parallelCalcV1PlusAlphaV2) {

	const uint basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 10.0, 0.1);
	SolverContext solverContext(1, 1, 1, model);

	CUDA_COMPLEX_TYPE vector[] = { { 0.002364389962054795, 0.1513209575715069 },
			{ 0.00472877992410959, 0.1489565676094521 }, { 0.007093169886164386,
					0.1465921776473973 }, { 0.00945755984821918,
					0.1442277876853425 }, { 0.01182194981027398,
					0.1418633977232877 }, { 0.01418633977232877,
					0.1394990077612329 }, { 0.01655072973438356,
					0.1371346177991781 }, { 0.01891511969643836,
					0.1347702278371233 }, { 0.02127950965849315,
					0.1324058378750685 }, { 0.02364389962054795,
					0.1300414479130137 }, { 0.02600828958260275,
					0.1276770579509589 }, { 0.02837267954465754,
					0.1253126679889041 }, { 0.03073706950671233,
					0.1229482780268493 }, { 0.03310145946876713,
					0.1205838880647945 }, { 0.03546584943082193,
					0.1182194981027398 }, { 0.03783023939287672,
					0.1158551081406849 }, { 0.04019462935493151,
					0.1134907181786302 }, { 0.04255901931698631,
					0.1111263282165754 }, { 0.0449234092790411,
					0.1087619382545206 }, { 0.0472877992410959,
					0.1063975482924658 }, { 0.04965218920315069,
					0.104033158330411 }, { 0.05201657916520549,
					0.1016687683683562 }, { 0.0543809691272603,
					0.0993043784063014 }, { 0.05674535908931508,
					0.0969399884442466 }, { 0.05910974905136987,
					0.0945755984821918 }, { 0.06147413901342467,
					0.092211208520137 }, { 0.06383852897547947,
					0.0898468185580822 }, { 0.06620291893753426,
					0.0874824285960274 }, { 0.06856730889958905,
					0.0851180386339726 }, { 0.07093169886164386,
					0.0827536486719178 }, { 0.07329608882369865,
					0.080389258709863 }, { 0.07566047878575343,
					0.07802486874780823 }, { 0.07802486874780823,
					0.07566047878575343 }, { 0.080389258709863,
					0.07329608882369865 }, { 0.0827536486719178,
					0.07093169886164386 }, { 0.0851180386339726,
					0.06856730889958905 }, { 0.0874824285960274,
					0.06620291893753426 }, { 0.0898468185580822,
					0.06383852897547947 }, { 0.092211208520137,
					0.06147413901342467 }, { 0.0945755984821918,
					0.05910974905136987 }, { 0.0969399884442466,
					0.05674535908931508 }, { 0.0993043784063014,
					0.0543809691272603 }, { 0.1016687683683562,
					0.05201657916520549 }, { 0.104033158330411,
					0.04965218920315069 }, { 0.1063975482924658,
					0.0472877992410959 }, { 0.1087619382545206,
					0.0449234092790411 }, { 0.1111263282165754,
					0.04255901931698631 }, { 0.1134907181786302,
					0.04019462935493151 }, { 0.1158551081406849,
					0.03783023939287672 }, { 0.1182194981027398,
					0.03546584943082193 }, { 0.1205838880647945,
					0.03310145946876713 }, { 0.1229482780268493,
					0.03073706950671233 }, { 0.1253126679889041,
					0.02837267954465754 }, { 0.1276770579509589,
					0.02600828958260275 }, { 0.1300414479130137,
					0.02364389962054795 }, { 0.1324058378750685,
					0.02127950965849315 }, { 0.1347702278371233,
					0.01891511969643836 }, { 0.1371346177991781,
					0.01655072973438356 }, { 0.1394990077612329,
					0.01418633977232877 }, { 0.1418633977232877,
					0.01182194981027398 }, { 0.1442277876853425,
					0.00945755984821918 }, { 0.1465921776473973,
					0.007093169886164386 }, { 0.1489565676094521,
					0.00472877992410959 }, { 0.1513209575715069,
					0.002364389962054795 } };

	Solver * solverDevPtr = solverContext.createSolverDev(vector);
	CUDA_COMPLEX_TYPE * vectorDevPtr1 = solverContext.transferState2Device(
			vector);

	CUDA_COMPLEX_TYPE resultState[basisSize];
	CUDA_COMPLEX_TYPE * resultStateDevPtr = solverContext.transferState2Device(
			resultState);

	//v2 = 10 v1
	for (int i = 0; i < basisSize; ++i) {
		vector[i].x *= 10;
		vector[i].y *= 10;
	}

	CUDA_COMPLEX_TYPE * vectorDevPtr2 = solverContext.transferState2Device(
			vector);

	FLOAT_TYPE alpha = 0.8;

	testSolverParallelCalcV1PlusAlphaV2(solverDevPtr, vectorDevPtr1, alpha,
			vectorDevPtr2, resultStateDevPtr);

	solverContext.transferState2Host(resultStateDevPtr, resultState);

	CUDA_COMPLEX_TYPE expectedResultState[] = { { 0.02127950965849315,
			1.361888618143562 }, { 0.04255901931698631, 1.340609108485069 }, {
			0.06383852897547947, 1.319329598826576 }, { 0.0851180386339726,
			1.298050089168083 }, { 0.1063975482924658, 1.276770579509589 }, {
			0.1276770579509589, 1.255491069851096 }, { 0.1489565676094521,
			1.234211560192603 }, { 0.1702360772679452, 1.21293205053411 }, {
			0.1915155869264384, 1.191652540875617 }, { 0.2127950965849315,
			1.170373031217123 }, { 0.2340746062434247, 1.14909352155863 }, {
			0.2553541159019179, 1.127814011900137 }, { 0.276633625560411,
			1.106534502241644 }, { 0.2979131352189042, 1.085254992583151 }, {
			0.3191926448773974, 1.063975482924658 }, { 0.3404721545358905,
			1.042695973266164 }, { 0.3617516641943836, 1.021416463607671 }, {
			0.3830311738528768, 1.000136953949178 }, { 0.40431068351137,
			0.978857444290685 }, { 0.4255901931698631, 0.957577934632192 }, {
			0.4468697028283562, 0.936298424973699 }, { 0.4681492124868494,
			0.915018915315206 }, { 0.4894287221453427, 0.893739405656712 }, {
			0.5107082318038358, 0.872459895998219 }, { 0.5319877414623289,
			0.851180386339726 }, { 0.553267251120822, 0.829900876681233 }, {
			0.5745467607793152, 0.80862136702274 }, { 0.5958262704378083,
			0.7873418573642467 }, { 0.6171057800963014, 0.7660623477057536 }, {
			0.6383852897547947, 0.7447828380472604 }, { 0.6596647994132878,
			0.7235033283887672 }, { 0.6809443090717809, 0.702223818730274 }, {
			0.702223818730274, 0.6809443090717809 }, { 0.7235033283887672,
			0.6596647994132878 }, { 0.7447828380472604, 0.6383852897547947 }, {
			0.7660623477057536, 0.6171057800963014 }, { 0.7873418573642467,
			0.5958262704378083 }, { 0.80862136702274, 0.5745467607793152 }, {
			0.829900876681233, 0.553267251120822 }, { 0.851180386339726,
			0.5319877414623289 }, { 0.872459895998219, 0.5107082318038358 }, {
			0.893739405656712, 0.4894287221453427 }, { 0.915018915315206,
			0.4681492124868494 }, { 0.936298424973699, 0.4468697028283562 }, {
			0.957577934632192, 0.4255901931698631 }, { 0.978857444290685,
			0.40431068351137 }, { 1.000136953949178, 0.3830311738528768 }, {
			1.021416463607671, 0.3617516641943836 }, { 1.042695973266164,
			0.3404721545358905 }, { 1.063975482924658, 0.3191926448773974 }, {
			1.085254992583151, 0.2979131352189042 }, { 1.106534502241644,
			0.276633625560411 }, { 1.127814011900137, 0.2553541159019179 }, {
			1.14909352155863, 0.2340746062434247 }, { 1.170373031217123,
			0.2127950965849315 }, { 1.191652540875617, 0.1915155869264384 }, {
			1.21293205053411, 0.1702360772679452 }, { 1.234211560192603,
			0.1489565676094521 }, { 1.255491069851096, 0.1276770579509589 }, {
			1.276770579509589, 0.1063975482924658 }, { 1.298050089168083,
			0.0851180386339726 }, { 1.319329598826576, 0.06383852897547947 }, {
			1.340609108485069, 0.04255901931698631 }, { 1.361888618143562,
			0.02127950965849315 } };

	//check the matrix
	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(resultState[i],
				EqArrayComplexElementAt(expectedResultState, i, RIGHT_DIGITS));
	}

	checkCudaErrors(cudaFree(vectorDevPtr1));
	checkCudaErrors(cudaFree(vectorDevPtr2));
	checkCudaErrors(cudaFree(resultStateDevPtr));
}

/**
 *	KAPPA = 1.0
 *	DELTA_OMEGA = 20.0
 *	G = 50.0
 *	LATIN_E = 2.0
 *	J = 0.1
 *
 *	atom1SSize = atom2SSize = atom3SSize = 2
 *	field1SSize = field2SSize = field3SSize = 2
 *
 *	timeStep = 0.1
 *	timeStepsNumber = 1
 *
 *	No jumps
 *
 */
TEST (Solver, oneLargeStep) {

	const int basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 2.0, 0.1);
	SolverContext solverContext(1, 0.1, 1, model);

	//the ground state
	CUDA_COMPLEX_TYPE initialState[basisSize] = { { 1.0, 0.0 } };

	Solver * solverDevPtr = solverContext.createSolverDev(initialState);

	testSolverSolve(solverDevPtr);

	CUDA_COMPLEX_TYPE ** results = solverContext.getAllResults();

	CUDA_COMPLEX_TYPE expectedResultState[] = { { 0.0003493690430408358,
			-7.202438253715121e-06 }, { 0.06482572244162993,
			-0.001276296313979916 }, { 0.06368721055228239,
			-0.002093697531553245 },
			{ 0.02654036179277024, -0.00132013467699703 }, {
					0.06482380468491689, -0.001276226610041489 }, {
					0.129300158367132, -0.002545320485767689 }, {
					0.1281616464777845, -0.003362721703341018 }, {
					0.0910147977182723, -0.002589158848784803 }, {
					0.06365083056158022, -0.002092799411796378 }, {
					0.1281271842437954, -0.003361893287522579 }, {
					0.1269886723544478, -0.00417929450509591 }, {
					0.0898418235949357, -0.003405731650539694 }, {
					0.02649483119294947, -0.001319004520574022 }, {
					0.0909711848751646, -0.002588098396300223 }, {
					0.0898326729858171, -0.003405499613873553 }, {
					0.05268582422630494, -0.002631936759317338 }, {
					0.06482572244162994, -0.001276296313979915 }, {
					0.129302076123845, -0.002545390189706116 }, {
					0.1281635642344976, -0.003362791407279444 }, {
					0.0910167154749854, -0.002589228552723232 }, {
					0.129300158367132, -0.002545320485767689 }, {
					0.1937765120493471, -0.003814414361493887 }, {
					0.1926380001599995, -0.00463181557906722 }, {
					0.1554911514004875, -0.003858252724511003 }, {
					0.1281271842437953, -0.003361893287522578 }, {
					0.1926035379260105, -0.004630987163248779 }, {
					0.1914650260366628, -0.005448388380822109 }, {
					0.1543181772771507, -0.004674825526265895 }, {
					0.0909711848751646, -0.002588098396300223 }, {
					0.1554475385573798, -0.003857192272026423 }, {
					0.1543090266680322, -0.004674593489599754 }, {
					0.1171621779085201, -0.003901030635043537 }, {
					0.06368721055228239, -0.002093697531553245 }, {
					0.1281635642344976, -0.003362791407279446 }, {
					0.12702505234515, -0.004180192624852776 }, {
					0.0898782035856378, -0.003406629770296561 }, {
					0.1281616464777845, -0.003362721703341018 }, {
					0.1926380001599997, -0.00463181557906722 }, {
					0.1914994882706521, -0.005449216796640548 }, {
					0.15435263951114, -0.004675653942084333 }, {
					0.1269886723544478, -0.004179294505095909 }, {
					0.1914650260366629, -0.005448388380822109 }, {
					0.1903265141473154, -0.006265789598395441 }, {
					0.1531796653878033, -0.005492226743839224 }, {
					0.0898326729858171, -0.003405499613873553 }, {
					0.1543090266680322, -0.004674593489599753 }, {
					0.1531705147786847, -0.005491994707173081 }, {
					0.1160236660191726, -0.004718431852616868 }, {
					0.02654036179277024, -0.00132013467699703 }, {
					0.0910167154749854, -0.002589228552723231 }, {
					0.0898782035856378, -0.003406629770296561 }, {
					0.05273135482612568, -0.002633066915740345 }, {
					0.0910147977182723, -0.002589158848784804 }, {
					0.1554911514004875, -0.003858252724511005 }, {
					0.1543526395111399, -0.004675653942084334 }, {
					0.1172057907516278, -0.003902091087528119 }, {
					0.0898418235949357, -0.003405731650539694 }, {
					0.1543181772771508, -0.004674825526265893 }, {
					0.1531796653878032, -0.005492226743839224 }, {
					0.1160328166282911, -0.004718663889283009 }, {
					0.05268582422630494, -0.002631936759317338 }, {
					0.11716217790852, -0.003901030635043537 }, {
					0.1160236660191726, -0.004718431852616868 }, {
					0.07887681725966036, -0.003944868998060652 } };

	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(results[0][i],
				EqArrayComplexElementAt(expectedResultState, i, RIGHT_DIGITS));
	}

	delete[] results[0];
	delete[] results;
}

/**
 *	KAPPA = 1.0
 *	DELTA_OMEGA = 20.0
 *	G = 50.0
 *	LATIN_E = 2.0
 *	J = 0.1
 *
 *	atom1SSize = atom2SSize = atom3SSize = 2
 *	field1SSize = field2SSize = field3SSize = 2
 *
 *	timeStep = 0.00001
 *	timeStepsNumber = 1000
 *
 *	No jumps
 *
 */
TEST (Solver, manyStepsNoJump) {

	const int basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 2.0, 0.1);
	SolverContext solverContext(1, 0.00001, 5000, model);

	//the ground state
	CUDA_COMPLEX_TYPE initialState[basisSize] = { { 1.0, 0.0 } };

	Solver * solverDevPtr = solverContext.createSolverDev(initialState);

	testSolverSolve(solverDevPtr);

	CUDA_COMPLEX_TYPE ** results = solverContext.getAllResults();

	CUDA_COMPLEX_TYPE expectedResultState[] = { { 0.999998691616525,
			-0.00035668242740145 }, { -0.000166950067722578,
			-0.000211921022619389 }, { 0.0000929867542327187,
			-0.0002153103797064067 }, { 0.00001938797958105298,
			-0.0002142656693715532 }, { -0.000166853717165855,
			-0.0002118979301337157 }, { -0.0003281989933705451,
			-0.00006713652535165439 }, { -0.0000682621714152491,
			-0.00007052588243867092 }, { -0.0001418609460669148,
			-0.00006948117210381701 }, { 0.0000930645067334497,
			-0.0002153386131708547 }, { -0.000068280769471243,
			-0.00007057720838879949 }, { 0.0001916560524840551,
			-0.00007396656547581502 }, { 0.0001180572778323876,
			-0.00007292185514095784 }, { 0.00001950816792123404,
			-0.0002142680584495162 }, { -0.0001418371082834573,
			-0.00006950665366745491 }, { 0.0001180997136718384,
			-0.00007289601075446962 }, { 0.00004450093902017242,
			-0.00007185130041961334 }, { -0.0001669500677225779,
			-0.000211921022619389 }, { -0.00032829534392727,
			-0.00006715961783732835 }, { -0.00006835852197197402,
			-0.00007054897492434655 }, { -0.0001419572966236394,
			-0.00006950426458949044 }, { -0.0003281989933705456,
			-0.00006713652535165435 }, { -0.0004895442695752406,
			0.00007762487943040604 }, { -0.0002296074476199409,
			0.00007423552234339075 }, { -0.0003032062222716068,
			0.00007528023267824613 }, { -0.00006828076947124295,
			-0.00007057720838879966 }, { -0.0002296260456759355,
			0.00007418419639325801 }, { 0.00003031077627936175,
			0.00007079483930624171 }, { -0.00004328799837230468,
			0.00007183954964109995 }, { -0.0001418371082834574,
			-0.00006950665366745503 }, { -0.000303182384488151,
			0.00007525475111460517 }, { -0.00004324556253285422,
			0.00007186539402758835 }, { -0.0001168443371845188,
			0.00007291010436244639 }, { 0.0000929867542327188,
			-0.0002153103797064072 }, { -0.00006835852197197401,
			-0.00007054897492434664 }, { 0.0001915782999833243,
			-0.00007393833201136106 }, { 0.0001179795253316594,
			-0.0000728936216765081 }, { -0.00006826217141524886,
			-0.00007052588243867072 }, { -0.0002296074476199417,
			0.00007423552234339081 }, { 0.00003032937433535708,
			0.00007084616525636791 }, { -0.00004326940031630895,
			0.00007189087559122314 }, { 0.0001916560524840552,
			-0.00007396656547581476 }, { 0.00003031077627936186,
			0.00007079483930624189 }, { 0.00029024759823466,
			0.00006740548221922957 }, { 0.000216648823582995,
			0.00006845019255408281 }, { 0.0001180997136718384,
			-0.00007289601075446972 }, { -0.00004324556253285411,
			0.00007186539402758801 }, { 0.0002166912594224435,
			0.00006847603694056989 }, { 0.0001430924847707783,
			0.00006952074727542973 }, { 0.00001938797958105311,
			-0.0002142656693715531 }, { -0.0001419572966236387,
			-0.00006950426458949071 }, { 0.0001179795253316589,
			-0.00007289362167650809 }, { 0.00004438075067999267,
			-0.00007184891134165707 }, { -0.0001418609460669153,
			-0.00006948117210381693 }, { -0.0003032062222716066,
			0.00007528023267824624 }, { -0.00004326940031630894,
			0.00007189087559122337 }, { -0.0001168681749679748,
			0.00007293558592607746 }, { 0.0001180572778323879,
			-0.0000729218551409577 }, { -0.00004328799837230458,
			0.00007183954964110002 }, { 0.0002166488235829944,
			0.00006845019255408275 }, { 0.0001430500489313277,
			0.00006949490288893365 }, { 0.00004450093902017215,
			-0.0000718513004196131 }, { -0.0001168443371845196,
			0.00007291010436244667 }, { 0.000143092484770779,
			0.00006952074727542943 }, { 0.00006949371011911287,
			0.00007056545761028223 } };

	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(results[0][i],
				EqArrayComplexElementAt(expectedResultState, i, RIGHT_DIGITS));
	}

	delete[] results[0];
	delete[] results;
}

/**
 *	KAPPA = 1.0
 *	DELTA_OMEGA = 20.0
 *	G = 50.0
 *	LATIN_E = 2.0
 *	J = 0.1
 *
 *	atom1SSize = atom2SSize = atom3SSize = 2
 *	field1SSize = field2SSize = field3SSize = 2
 *
 *	timeStep = 0.0001
 *
 */
TEST (Solver, makeJump) {

	const int basisSize = 64;

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 30.0, 0.1);
	SolverContext solverContext(1, 0.0001, 1000, model);

	CUDA_COMPLEX_TYPE stateBeforeJump[] =
			{ { 0.696532586336, 0.0334594873511 }, { -0.179762503723,
					0.0195266034956 }, { -0.183403610497, 0.0203901498979 }, {
					-0.182487620901, 0.0201698326892 }, { -0.179764307374,
					0.019527020851 }, { -0.0560593974336, 0.00559413699551 }, {
					-0.05970050420710001, 0.00645768339777 }, {
					-0.0587845146109, 0.00623736618914 }, { -0.183404355403,
					0.0203903092664 }, { -0.0596994454625, 0.00645742541098 }, {
					-0.06334055223590001, 0.007320971813229999 }, {
					-0.0624245626397, 0.007100654604610001 }, { -0.182489364956,
					0.0201702107317 }, { -0.05878445501590001,
					0.006237326876280001 },
					{ -0.0624255617893, 0.00710087327853 }, { -0.0615095721931,
							0.00688055606991 }, { -0.179762503723,
							0.0195266034956 }, { -0.0560575937832,
							0.005593719640130001 }, { -0.0596987005566,
							0.00645726604239 }, { -0.0587827109604,
							0.006236948833760001 }, { -0.0560593974336,
							0.00559413699551 }, { 0.06764551250649999,
							-0.00833874685997 }, { 0.0640044057331,
							-0.0074752004577 }, { 0.0649203953293,
							-0.00769551766633 }, { -0.0596994454625,
							0.00645742541098 }, { 0.0640054644777,
							-0.007475458444490001 }, { 0.0603643577043,
							-0.006611912042239999 }, { 0.0612803473005,
							-0.00683222925086 }, { -0.05878445501590001,
							0.006237326876280001 }, { 0.0649204549243,
							-0.00769555697919 }, { 0.06127934815089999,
							-0.00683201057694 }, { 0.0621953377471,
							-0.00705232778557 }, { -0.183403610497,
							0.0203901498979 }, { -0.0596987005566,
							0.00645726604238 }, { -0.06333980733010001,
							0.00732081244463 }, { -0.0624238177339,
							0.00710049523601 }, { -0.05970050420710001,
							0.00645768339777 }, { 0.0640044057331,
							-0.0074752004577 }, { 0.06036329895970001,
							-0.00661165405545 }, { 0.0612792885559,
							-0.006831971264070001 }, { -0.06334055223590001,
							0.00732097181324 }, { 0.0603643577043,
							-0.00661191204223 }, { 0.0567232509308,
							-0.005748365639979999 }, { 0.057639240527,
							-0.005968682848610001 }, { -0.0624255617893,
							0.00710087327854 }, { 0.06127934815089999,
							-0.00683201057694 }, { 0.0576382413775,
							-0.00596846417468 }, { 0.0585542309737,
							-0.006188781383319998 }, { -0.182487620901,
							0.0201698326892 }, { -0.0587827109604,
							0.006236948833760001 }, { -0.0624238177339,
							0.00710049523601 }, { -0.06150782813769999,
							0.00688017802739 }, { -0.0587845146109,
							0.00623736618914 }, { 0.0649203953293,
							-0.00769551766633 }, { 0.0612792885559,
							-0.00683197126408 }, { 0.0621952781521,
							-0.00705228847269 }, { -0.0624245626397,
							0.007100654604610001 }, { 0.0612803473005,
							-0.00683222925086 }, { 0.057639240527,
							-0.005968682848610001 }, { 0.0585552301232,
							-0.00618900005724 }, { -0.0615095721931,
							0.0068805560699 }, { 0.0621953377471,
							-0.00705232778557 }, { 0.0585542309737,
							-0.00618878138331 }, { 0.0594702205699,
							-0.00640909859194 } };

	Solver * solverDevPtr = solverContext.createSolverDev(stateBeforeJump);

	//skip one random number
	testSolverParallelMakeJump(solverDevPtr);
	//test jump
	testSolverParallelMakeJump(solverDevPtr);

	//jumps in the second cavity
	CUDA_COMPLEX_TYPE stateAfterJumpInSecond[] = { { -0.241760844311824,
			0.05735294217263367 }, { -0.241760844311824, 0.05735294217263367 },
			{ -0.241760844311824, 0.05735294217263367 }, { -0.241760844311824,
					0.05735294217263367 }, { -0.02701632146462167,
					0.005696714517755487 }, { -0.02701632146462167,
					0.005696714517755487 }, { -0.02701632146462167,
					0.005696714517755487 }, { -0.02701632146462167,
					0.005696714517755487 }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.02701632146462167, 0.005696714517755487 }, {
					-0.02701632146462167, 0.005696714517755487 }, {
					-0.02701632146462167, 0.005696714517755487 }, {
					-0.02701632146462167, 0.005696714517755487 }, { 0., 0. }, {
					0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
					0., 0. }, { 0., 0. }, { -0.241760844311824,
					0.05735294217263367 }, { -0.241760844311824,
					0.05735294217263367 }, { -0.241760844311824,
					0.05735294217263367 }, { -0.241760844311824,
					0.05735294217263367 }, { -0.02701632146462167,
					0.005696714517755487 }, { -0.02701632146462167,
					0.005696714517755487 }, { -0.02701632146462167,
					0.005696714517755487 }, { -0.02701632146462167,
					0.005696714517755487 }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.241760844311824, 0.05735294217263367 }, {
					-0.02701632146462167, 0.005696714517755487 }, {
					-0.02701632146462167, 0.005696714517755487 }, {
					-0.02701632146462167, 0.005696714517755487 }, {
					-0.02701632146462167, 0.005696714517755487 }, { 0., 0. }, {
					0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, {
					0., 0. }, { 0., 0. } };

	CUDA_COMPLEX_TYPE ** results1 = solverContext.getAllResults();
	print(std::cout, "After the first jump", results1[0], basisSize);

	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(results1[0][i],
				EqArrayComplexElementAt(stateAfterJumpInSecond, i,
						RIGHT_DIGITS - 2));
	}

	delete[] results1[0];
	delete[] results1;

	//skip one random number
	testSolverParallelMakeJump(solverDevPtr);
	//test jump
	testSolverParallelMakeJump(solverDevPtr);

	CUDA_COMPLEX_TYPE stateAfterJumpInFirst[] = { { -0.241778824627901,
			0.05735754856472159 }, { -0.241778824627901, 0.05735754856472159 },
			{ -0.241778824627901, 0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.241778824627901,
					0.05735754856472159 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { -0.02685230433497904,
					0.005662626254483625 }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. },
			{ 0., 0. }, { 0., 0. }, { 0., 0. }, { 0., 0. } };

	CUDA_COMPLEX_TYPE ** results2 = solverContext.getAllResults();
	print(std::cout, "After the second jump", results2[0], basisSize);

	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(results2[0][i],
				EqArrayComplexElementAt(stateAfterJumpInFirst, i,
						RIGHT_DIGITS - 2));
	}

	delete[] results2[0];
	delete[] results2;

	//skip one random number
	testSolverParallelMakeJump(solverDevPtr);
	//test jump
	testSolverParallelMakeJump(solverDevPtr);

	CUDA_COMPLEX_TYPE stateAfterJumpInThird[] = { { -0.2417788246279629,
			0.05735754856444291 },
			{ -0.02685230433498556, 0.005662626254631792 }, { 0., 0. },
			{ 0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. }, { -0.2417788246279629, 0.05735754856444291 }, {
					-0.02685230433498556, 0.005662626254631792 }, { 0., 0. }, {
					0., 0. } };

	//checks

	CUDA_COMPLEX_TYPE ** results3 = solverContext.getAllResults();
	print(std::cout, "After the third jump", results3[0], basisSize);

	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(results3[0][i],
				EqArrayComplexElementAt(stateAfterJumpInThird, i,
						RIGHT_DIGITS - 2));
	}

	delete[] results3[0];
	delete[] results3;
}

/**
 *	KAPPA = 1.0
 *	DELTA_OMEGA = 20.0
 *	G = 50.0
 *	LATIN_E = 2.0
 *	J = 0.1
 *
 *	atom1SSize = atom2SSize = atom3SSize = 2
 *	field1SSize = field2SSize = field3SSize = 2
 *
 *	timeStep = 0.00001
 *	timeStepsNumber = 1000000
 *
 *	Makes several jumps:
 *	1) in the second cavity
 *	2) in the first cavity
 *	3) in the third cavity
 *
 */
TEST (Solver, severalJumps) {

	Model model(2, 2, 2, 2, 2, 2, 1.0, 20.0, 50.0, 30.0, 0.1);

	const int basisSize = 64;

	SolverContext solverContext(1, 0.0001, 5000, model);

	//the ground state
	CUDA_COMPLEX_TYPE initialState[basisSize] = { { 1.0, 0.0 } };

	Solver * solverDevPtr = solverContext.createSolverDev(initialState);

	testSolverSolve(solverDevPtr);

	CUDA_COMPLEX_TYPE ** results = solverContext.getAllResults();

	CUDA_COMPLEX_TYPE expectedResultState[] = { { -0.203470718, 0.3382981526 },
			{ -0.1189207813, 0.197612049 }, { -0.1238852873, 0.2060443142 }, {
					-0.1226421734, 0.203917448 },
			{ -0.1189232601, 0.1976162071 }, { -0.03437332346, 0.05693010357 },
			{ -0.03933782942, 0.06536236879 },
			{ -0.03809471556, 0.06323550262 }, { -0.1238863355, 0.206046008 }, {
					-0.03933639886, 0.06535990442 }, { -0.04430090482,
					0.07379216964 }, { -0.04305779096, 0.07166530347 }, {
					-0.1226446185, 0.2039214226 }, { -0.0380946818,
					0.06323531901 }, { -0.04305918777, 0.07166758423 }, {
					-0.0418160739, 0.06954071807 },
			{ -0.1189207813, 0.197612049 }, { -0.03437084461, 0.05692594543 }, {
					-0.03933535058, 0.06535821065 }, { -0.03809223672,
					0.06323134448 }, { -0.03437332346, 0.05693010357 }, {
					0.05017661323, -0.08375599999 }, { 0.04521210726,
					-0.07532373477 }, { 0.04645522113, -0.07745060094 }, {
					-0.03933639886, 0.06535990442 }, { 0.04521353783,
					-0.07532619914 }, { 0.04024903186, -0.06689393393 }, {
					0.04149214572, -0.06902080009 }, { -0.0380946818,
					0.06323531901 }, { 0.04645525488, -0.07745078455 }, {
					0.04149074892, -0.06901851933 }, { 0.04273386278,
					-0.0711453855 }, { -0.1238852873, 0.2060443142 }, {
					-0.03933535058, 0.06535821065 }, { -0.04429985654,
					0.07379047587 }, { -0.04305674268, 0.0716636097 }, {
					-0.03933782942, 0.06536236879 }, { 0.04521210726,
					-0.07532373477 }, { 0.0402476013, -0.06689146956 }, {
					0.04149071516, -0.06901833572 }, { -0.04430090482,
					0.07379216964 }, { 0.04024903186, -0.06689393393 }, {
					0.0352845259, -0.05846166871 }, { 0.03652763976,
					-0.06058853487 }, { -0.04305918777, 0.07166758423 }, {
					0.04149074892, -0.06901851933 }, { 0.03652624295,
					-0.06058625411 }, { 0.03776935682, -0.06271312028 }, {
					-0.1226421734, 0.203917448 }, { -0.03809223672,
					0.06323134448 }, { -0.04305674268, 0.0716636097 }, {
					-0.04181362882, 0.06953674354 }, { -0.03809471556,
					0.06323550262 }, { 0.04645522113, -0.07745060094 }, {
					0.04149071516, -0.06901833572 }, { 0.04273382902,
					-0.07114520189 }, { -0.04305779096, 0.07166530347 }, {
					0.04149214572, -0.06902080009 }, { 0.03652763976,
					-0.06058853487 }, { 0.03777075362, -0.06271540104 }, {
					-0.0418160739, 0.06954071807 }, { 0.04273386278,
					-0.0711453855 }, { 0.03776935682, -0.06271312028 }, {
					0.03901247068, -0.06483998645 } };

	for (int i = 0; i < basisSize; ++i) {
		ASSERT_THAT(results[0][i],
				EqArrayComplexElementAt(expectedResultState, i, RIGHT_DIGITS));
	}

	delete[] results[0];
	delete[] results;
}

